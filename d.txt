def dic(transactions, minsup, M=2):

    db = [set(t) for t in transactions]
    N = len(db)
    if N == 0:
        return {}

    if 0 < minsup <= 1:
        threshold = (minsup * N + 0.999999) // 1  # ceil
        threshold = int(threshold)
    else:
        threshold = minsup

    all_items = []
    for t in db:
        for x in t:
            if x not in all_items:
                all_items.append(x)
    all_items.sort()

    SS, SC, DS, DC = [], [], [], []
    counters = {}

    for item in all_items:
        s = frozenset([item])
        DC.append(s)
        counters[s] = {"count": 0, "seen": 0}

    def add_candidate(c):
        if c in SS or c in SC or c in DS or c in DC:
            return
        k = len(c)
        if k == 1:
            DC.append(c)
            counters[c] = {"count": 0, "seen": 0}
            return
        for sub in subsets_of_size(c, k - 1):
            if sub not in SS and sub not in DS:
                return
        DC.append(c)
        counters[c] = {"count": 0, "seen": 0}

    def subsets_of_size(s, k):
        s = list(s)
        n = len(s)
        result = []

        def rec(start, chosen):
            if len(chosen) == k:
                result.append(frozenset(chosen))
                return
            for i in range(start, n):
                rec(i + 1, chosen + [s[i]])
        rec(0, [])
        return result

    def supersets(c):
        c_list = list(c)
        last_index = -1
        for x in c_list:
            idx = all_items.index(x)
            if idx > last_index:
                last_index = idx
        for item in all_items:
            if item in c:
                continue
            if all_items.index(item) > last_index:
                sup = set(c)
                sup.add(item)
                yield frozenset(sup)

    processed = 0
    while DS or DC:
        for _ in range(M):
            t = db[processed % N]
            for c in DS + DC:
                counters[c]["seen"] += 1
                if c.issubset(t):
                    counters[c]["count"] += 1
            processed += 1

        moved = []
        for c in list(DC):
            if counters[c]["count"] >= threshold:
                DC.remove(c)
                DS.append(c)
                moved.append(c)

        for c in moved:
            for sup in supersets(c):
                add_candidate(sup)

        for c in list(DS):
            if counters[c]["seen"] >= N:
                DS.remove(c)
                SS.append(c)
        for c in list(DC):
            if counters[c]["seen"] >= N:
                DC.remove(c)
                SC.append(c)

    result = {}
    for c in SS:
        result[c] = counters[c]["count"]
    return result

transactions = [
    {"A", "B"},
    {"A"},
    {"B", "C"},
    set()
]

freqs = dic(transactions, minsup=0.25, M=2)
for itset, cnt in freqs.items():
    print(set(itset), ":", cnt)